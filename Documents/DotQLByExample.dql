DotQL By Example
================

Types:
------

List - sequential:

	return [1, 2, 3]

Set - unordered, unique:

	return { 1, 2, 3, }

Tuple:

	return { OrderItems: "Sally", Age: 23 }

Interval:
	
	return 2..6

Enumeration:

	return Red	

Void:

(no expression)

Scalar - intrinsic types:

	return 456										// Int32 or Int64
	return true										// Boolean
	return "Hello\r\nWorld"							// C-style string (UTF16) ("String")
	return 'Hello'#13#10'World'						// Pascal-style string ('' escapes, captures whitespace) (UTF16) ("String")
	return 'H'c										// Character ("Char")
	return 'Ancestry\Person'n						// Name
	return '2012-12-12'd							// Date
	return '15:30.2't								// Time
	return '2012-12-12'dt							// DateTime
	return 2.4										// Double
	return '84edd204-4b7d-45d0-9a3f-18f2fccc9732'g	// GUID
	return '5d3h'ts									// TimeSpan
	return 1.2.0									// Version (3 or 4 components)

**Note:** The convention is to use a single space inside of single-line braces (e.g. { x }), but no space for brackets (e.g. [x])

Declaration
-----------

"Table" variable declaration:

	Customers: 
	{
		{ 
			ID: Int32, 
			City: String, 
			ref Orders{ ID } Orders{ CustomerID }, 
			key { ID } 
		}
	}

Reads: Customers is a set of tuples, each having an ID, City, reference to Orders, and identified by ID

Tables really are just sets of tuples:

	Order: 
		typedef
		{ 
			ID: Int32, 
			CustomerID: Int32, 
			On: DateTime, 
			ref Customer{ CustomerID } Customers{ ID }, 
			ref Items{ ID } OrderItems{ OrderID }, 
			key { ID }
		},
	Orders: { Order }

Defines a tuple type called Order with some columns and references, then a variable called Orders which is a set of Order tuples.

References are not bidirectional; they must be designated from each direction:

	OrderItems: 
	{ 
		{ 
			OrderID: Int32, 
			PartID: Int32, 
			Quantity: Int32
			ref Order{ OrderID } Orders{ ID }, 
			ref Part{ PartID } Parts{ ID },
			key { OrderID, PartID }
		}
	}

**Note:** The terms: tuple set, table, and relation are all synonymous

The last of the structures to be used in examples:

	Parts:
	{
		{
			ID: Int32,
			Name: String,
			IsDiscontinued: Boolean,
			ref OrderItems{ ID } OrderItems{ PartID },
			key { ID }
		}
	}

Sets may be over any type., A set of Int32s:

	Things: { Int32 }

Identifiers may have a qualified (compound) name:

	Salad\Size: Int32

...if Value not ambiguous, may be accessed as:
	
	return Size

...or

	return Salad\Size

Claused Expressions
-------------------

FLWOR (pronounced "flower") syntax:

	for ...
	let ...
	where ...
	order ...
	return ...

All but return are optional, let may be repeated any number of times

Simple cardinality 1 FLWOR:

	return 5

Iterator - all clauses are per iteration:

	for i in 1..5
	return i

Returns `[1, 2, 3, 4, 5]`

Let provides reuse:
	
	let x := 5**5
	return { Num: x, Other: x + 1 }

Return: `{ Num: 3125, Other: 3126 }`

Where restricts result cardinality:

	for i in 1..6
	where i % 2 = 0
	return i

Returns `[2, 4, 6]`

Order specifies result ordering:

	for i in 1..3
	order (i desc)
	return i

Returns `[3, 2, 1]`

"Path" Queries
--------------

Base table access:

	return Customers

Result: entire person table. e.g. `{ { ID:123, City:"Nephi" } { ID:124, ...`

Restriction on a key attribute:

	return Customers?(ID = 234)

e.g. `{ { ID:234, City:"Provo" } }`

Reads: Customers where ID is 234., The parenthesis are not optional.

**Note:** Result remains a set even though restricted on a key.

Restriction is arbitrary boolean expression:

	return Parts?(not IsDiscontinued)

e.g. `{ { ID:456, IsDiscontinued:false } ... `

Dereference:

	return Customers.Orders

e.g. `{ { ID:456, CustomerID:123, On:'2/3/2003 5:30:00'dt } { ID:457, CustomerID:123, On:'2/7/2003 7:30:00'dt } ... `

Orders is a reference on the Customer tuple; accessing it gives Orders for all matching Customers.

Combining restriction with dereferencing:

	return Customers?(City = "Orem").Orders

...reads: all Orders associated with Customers that have City of "Orem"

Equivalent query:

	return Orders(exists Customers?(City = "Orem" and ID = CustomerID))

The `ID' indicates the ID for Customer., To access the ID of Orders use `outer`., e.g. `outer.ID`
																															,  
**Note:** only the last table in a path sequence is returned, the prior tables serve to logically restrict said table

Dotting through an Extention (one to zero or one) relationship: 

	return Customers?(ID = 123).Orders.OrderItems.Part

e.g. `{ { ID:123, Name:"Frogalbadge", ... }` 

Any query that "dots" through an n-cardinality table will produce an n-cardinality result unless restricted.

Embedded Path Expressions
-------------------------

Embedded reference:

	return Customers?(ID = 123)<<Orders

e.g. result: `{ ID:123, City:"Provo", Orders:{ { ID:234, CustomerID:123, On:'1/23/2002 4:20:00'dt } ... }`

A row from the Customer table already has an Orders member, but it is a reference, not an attribute;
 this operator acts to "materialize" the reference as an embedded table attribute

Dot paths following an embedded path:

	return Customers?(ID = 123)<<Orders.OrderItems

e.g. result: `{ ID:123, City:"Provo", Orders\OrderItems:{ { OrderID:456, PartID:222, Quantity:3 } ... } }`

Remember... because Orders\OrderItems is a qualified name, it may be accessed as just OrderItems because in this case it is not ambiguous

Dot paths preceding an embedded path:

	return Customers?(ID = 123).Orders<<OrderItems

e.g. result: `{ ID:456, CustomerID:123, On:'1/23/2002 4:20:00'dt, OrderItems:{ { OrderID:456, PartID:222, Quantity:3 } }`

Embedding multiple tables:

	return OrderItems<<{ Order:Order, Part:Part }

...or just:

	return OrderItems<<{ :Order, :Part }

e.g. result:

	{ { 
		OrderID:234, 
		PartID:112, 
		Order:{ ID:234, CustomerID:123, On:'1/23/2002 4:20:00'dt }, 
		Part:{ ID:112, Name:'Whatzit' } 
	} }

If an attribute name is omitted, it will be inferred from the expression. e.g. `:Order`.

Dereferencing multiple tables:

	return Customers?(ID = 123).Orders.{ :Customer, :OrderItems }

This causes the table names to be nested as attributes in a new tuple., e.g.:

	{ { 
		Customer: { ID:123, City:"Provo" }, 
		OrderItems: { { OrderID:456, PartID:222, Quantity:3 } } 
	} }

Using paths within claused expressions:

	for o in Customers?(ID = 123).Orders
	return { ID:, o.ID }

e.g. `{ { ID:456 }, { ID:457 }, ... }`

Ordering produces lists rather than sets (in order to preserve sequence)

	for o in Customers?(ID = 123).Orders
	order (o.ID)
	return { ID: o.ID }

e.g. `[{ ID:456 }, { ID:457 }, ...]`

Path restriction works on lists too:

	return [{ ID:123 }, { ID:124 }]?(ID > 123)

Result: `[{ ID:124 }]`

Reuse within paths:

	for c in Customer
	let lc := ToLower(c.City)
	where lc = 'orem' or lc = 'lehi'
	return { City: lc }

Item Extraction
---------------

List member extraction:

	return [2, 4, 6, 8][0]

returns: `2`

Singleton member extraction from list:

	return [2][]	

Result: `2`

**Note:** Singleton extraction is not the same as `[0]`, `[0]` for an set having more than 1 entry returns null, whereas singleton extraction throws an exception in this case.

Single member extraction from set:

	return { 2 }[]

Result: `2`

Empty list or set extraction:

	return [][]
	return { }[]

result `null`

Invalid single member extraction:

	return [2, 4][]
	return { 2, 4 }[]

**Runtime exception!**, Cannot extract single member from a set or list with more than one item.

Explicit Typing
---------------

Empty list type selection:

	return [] of [Int32]

Explicitly designating type of list:

	return [4] of [Int64]

Similar for sets

	return { } of { String }

Types for nulls:

	return null of Int32

Types for tuples:

	return { ID:135 } of { ID:Int64 }

Conditions and cases
--------------------

Conditional expression:

	return if true then "Hello" else "Goodbye"

Result: `"Hello"`

Value-based case expression:

	let n := 123
	return 
		case n 
			when 123 then "Hello"
			when 234 then "Goodbye"
			else "Speechless"
		end

Result: `"Hello"`

Condition base case expression:

	let x := 123
	let y := 234
	return
		case
			when x = 135 and y = 231 then "Hello"
			when true then "Goodbye"
			else "Speechless"
		end

Result: `"Goodbye"`

Strict cases:

	Colors: enum { Green, Red, Blue }
	...
	return 
		case strict x // Error: this case statement must handle all colors
			when Green then 1 
			when Red then 2 
		end

Functions
---------

Function declaration:

	let Sign := (x : Int32) 
		return case when x < 0 then -1 when x > 0 then 1 else 0 end

A single FLWOR expression is expected as the body of the function., The return type is usually inferred from this expression,
though it may be given explicitly:, `(x : Int32) : String return...`
, 
Calling Functions:

	for n in [5, 0, -8]
	return Sign(n)

Result: `[1, 0, -1]`

The expression to the left of the `->` is passed as the first argument to the function, and additional arguments are passed in the following parenthesis.

Alternate declaration of Sign function:

	let Sign := (x : Int32) 
		return ToInt32(0 < x) - ToInt32(x < 0)

The ToInt32 function is part of the standard library; in this case it converts from Boolean to Int32s (0 or 1).

Overloading is only supported for the first argument, functions are otherwise resolved by name only.  If overloads are present, 
only exact types are allowed for the first argument, other arguments will follow the usual implicit conversion rules.

Recursive function:

	let SequentialSum := (x : Int32) : Int32
		return if x = 0 then 0 else x + self(x - 1)
	return SequentialSum(5)

Result: `15`

`self` is a reserved word designating the function being declared.  `self` is only available if a return type is explicitly designated.  

Accessing arguments as a tuple:

	let Point := (x : Int32, y : Int32) return args
	return Point(5, 7)

Result: `{ x:5, y:7 }`

`args` is a tuple representation of the function's arguments, available within any function

Invoking functions passing arguments as a tuple:

	return Point->{ y:5, x:7 }

Result: `{ x:7, y:5 }` (tuple attribute order never matters)

Function type declaration:

	InventoryFunc: typedef (PartID : Int64) : Int32

A function selector may specify a function type name rather than repeat the signature:

	InventoryCities: const 
	{ 
		{ IDs:1..100, DetermineInventory:InventoryFunc return 50, key { IDs } },
		{ IDs:101..99999, DetermineInventory:InventoryFunc return 30 }
	}

Polymorphic invocation of functions:

	for PartID in Parts.ID 
	return { :PartID, Quantity : InventoryCities(PartID in IDs)[].DetermineInventory(PartID) }

This uses functions provided in a table to invoke a different inventory function depending on the ID of the part.

Complex function example:

	let PreferredName := (PersonID : Int64)
		let orderedn :=
			for n in Attributes(value.PersonID = args.PersonID).Name
			let ap := n.Attribute.Priority
			order (ap.Priority ?? 0 desc, n.ID)
			return n
		return orderedn[0]

Nulls
-----

Nulls propagate:

	return 5 * 2 + 3 - (null of Int32)

Returns: `null`

Resolving nulls:

	return ([] of [Int32])[0] ?? 5;

Returns: `5`

Out of range item extraction produces a null., The `??` (if null) operator resolves the null., The parentheses are not necessary in this case, but makes it clear that the `[0]` item extraction is on the empty list, not the type.

Determining null:

	return IsNull(OrderItems(ID = 1212)[].Delivered)

e.g. result `true` if null either because there was no such row, or there was a row but the hypothetical Delivered attribute doesn't have a value

Restricting off a singleton:

	return 5(value > 10)

Result: `null` (because the value doesn't pass the restriction)

Tuple with optional attribute:

	return { First:"Bob" } of { Prefix:String?, First:String }

Result: `{ Prefix:null, First:"Bob" }` 

... versus tuple with defaulted attribute:

	return { First:"Bob" } of { Prefix:String, First:String }

Result: `{ Prefix:"", First:"Bob" }` 

Explicitly marking required:

	OptionalInterval: typedef interval Int32!?

The `!` symbol indicates requiredness, so this is an interval of required Int32s., The user of a typedef can override the requiredness of the "outer" typedef.

Enumerations
------------

Enumeration declaration:

	Colors: enum { Red, Yellow }

Enumeration usage:

	let PickOpposite := (Color:Colors) =>
		if Color = Red then Yellow else Red
	return Red->PickOpposite()

Result: `Yellow`

Dealing with enumeration symbol ambiguity:

	let Colors := enum { Red, Yellow }
	let Personality := enum { Red, Yellow, Blue, White }
	return Red	

**ERROR:** this conflicts with the Color Red

To correct:

	return Personality\Red

Result: `Personality\Red`

Enumerations can be enumerated:

	for c in Colors
	return c;

Result: `{ Red, Yellow }`

Default Values
--------------

Variables and arguments are required unless expressly marked as optional., Required variables are defaulted as follows:
* Numerics: `0`
* String: `""`
* Tuple: each attribute defaulted
* Set: empty
* List: empty
* Function: function that returns default of return type
* Interval: default..default
* GUID: `'00000000-0000-0000-0000-000000000000'g`
* Enumerations: first member
* Version: `0.0.0`
* Boolean: `false`

Type Definitions
----------------

Type Definitions provide type description reuse:

	SetOfNumbers: typedef { Int32 }

Type Definitions are pure short-hands though; for instance, these represent the same type:

	CustomerTuple1: typedef { Name:String, Age:Int32 }
	CustomerTuple2: typedef { Age:Int32, Name:String }

(order of attributes doesn't matter in a tuple, so these two typedefs are equivalent)

Tuples, lists, and sets don't have meaningful names; their type description *is* their name

Modules
-------

Declaring a module:

	module Ancestry\FamilyPaths 1.0.0 
	{
		Code: enum { Parent, Sibling, Child, Spouse }
		Modifier: enum { Male, Female, Elder, Younger, Legal, God, Former, Practical }
		Component: typedef { Code:Code, Multiplier:Int32?, Modifiers:{ Modifier }? }
		Path: typedef [Component]
		Normalize: const (Path: Path) =>
			...
		...
	}

...which is short-hand for upserting into the System\Modules table:

	Modules:
	{
		Name: Name
		Version: Version 
		Class: (compiled code)
	}

Using a module:

	using Ancestry\FamilyPaths 1.0.0
	return [{ Code:Parent }, { Code:Parent }]->Normalize()

Result: `[{ Code:Parent, Multiplier:2, Modifiers:{ } }]`

Module ambiguity:

	using Ancestry\FamilyPaths 1.0.0
	using Police 1.0.0
	return Code\Fire	// ERROR: Code is ambiguous

Valid:
	
	return Police\Code\Fire

**Note:** all module declaration and usage must include explicit version number

Module aliases:

	using fp := Ancestry\FamilyPaths 1.0.0
	return fp\Code\Parent

... or just `Code` if not ambiguous

Modules may contain the following members:

	module MyModule 2.1.0
	{
		Current: Int32,									// Variables
		Code: typedef Int32,							// Type Definitions
		Colors: enum { Red Green },						// Enumerations
		BestNumber: const 5,							// Constants
		Square: const (x:Int32) => x * x				// Functions (as variables or consts)
	}

Scripts
-------

A script is composed of the following:

`using Colors 1.2.0`	Any number of usings, 
`module Cars 1.2.1 ...`	Any number of module declarations, 
`var NewID := 123`	Any number of variable declarations, 
`set NewID := GenerateID()`	Any number of assignment executions, 
`return NewID`	Zero or one terminating claused expression, 

**Note:** Non-determinism is allowed in any expression

A script not ending in a claused expression implicitly has a result of void, but this can be explicit too:

	using ...
	...
	return void

Updates
-------

All mutation (side-effects) happens within Set assignments:

	set	FavoriteColor := Green

The left-hand side of assignments may contain reference-based path expressions:

	set Customer?(ID = 123).City := "American Fork"

Effect: Updates the City attribute of the specified tuple of the Customer table

Set statements follow the FLWOR pattern except for Return becomes any number of set Set clauses and there is no Order (FLWS):

	let p := Customer?(ID = 123)
	set p := { ID:p.ID, City:"Cedar City" }

Effect: Updates the specified tuple of the Customer table

**Note:** Assignment of table references is logically a deletion of all matching tuples, followed by insertion of the given value(s)

Insert using the restriction predicate for defaulting:

	set Customer?(ID = 123) := { City:"Spanish Fork" }

ID 123 is implicitly included in the tuple being added or updated.

Deletion is enabled by assignment to null:

	set Customer?(ID = 123) := null

Practical insertion example:

	let newID := "Customer.ID"->GenerateID()
	set Customer?(ID = newID) := { City:"Saratoga Springs" }
	return newID

Effect: Generates a new ID, inserts a person tuple based on that ID, and returns the new ID

Updating with iteration:

	for i in 1..6
	set Customer?(ID = i).City := "Vinyard"

Effect: Sets the City attribute of a range of person tuples in the person table variable

Scope
-----

Each script has a local frame, which hides any imported context:

	using Ancestry\FamilyPaths 1.0.0
	var Code: Int32	// Hides the Code in FamilyPaths

Module members can access other module members, and in any order

	module Selfish 1.0.0 
	{
		Current: Code,
		Code: typedef Int32
	}

Usings are global to the script, including within modules

	using Ancestry\FamilyPaths 1.0.0
	module PeopleFinder 1.2.0
	{
		Connection: typedef { SourceID:Int64, TargetID:Int64, Path:Path }
	}

Exceptions
----------

Try/catch expression:

	return try 1 / 0 catch -1

Result: `-1`

Throwing exceptions:

	return if i >= 0 then i else !!{ Message:"'i' may not be negative" }

Example of throwing for a null:

	return Setting[] ?? !!{	Message:"The settings are not setup." }

Result: The singleton row from the table Setting; an exception will be thrown if there isn't one

Nullological Cases
------------------

Empty set of attribute carrying tuples:

	return { } of { { ID:Int32 } }

Empty lists of normal tuples:

	return [] of [{ ID:Int32 }]

Empty tuple of attribute carrying tuple:

	return { : } of { ID:Int32, key { ID } }

Result: `{ ID:0 }`

In an expression context `{ }` means empty set; for a no-attribute tuple specify a ":" to distinguish that it is a tuple. 
In a type context `{ : }` means a no-attribute tuple because a set requires a member type

Empty set of type void:

	return { }

Set containing one no-attribute tuple (aka "table dee"):

	return { { : } }

Set containing zero no-attribute tuples (aka "table dum"):

	return { } of { { : } }

List of no-attribute tuples:

	return [{ : } null { : }]

Set of type set of lists of no-attribute tuples:

	return { [{ : }], [], [{ : }, { : }] } of { [{ : }] }

Generics
--------

Functions may take type arguments:

	let Add := (x:T y:T) => <T>
		x + y
	return 5->Add<Int32>(10)

Result: `15`

The type parameter can be inferred:

	return 5.0->Add(10.0)

Result: `15.0`

List Operations
---------------

Union:
	
	return [1, 2] | [2, 3]

Result: `[1, 2, 2, 3]`

Push:

	return [1, 2]->Push(3)

Result: `[1, 2, 3]`

Pop:

	return [1, 2, 3]->Pop()

Result: `{ Item:3, Remaining:[1, 2] }`

Enqueue:

	return [2, 3]->Enqueue(1)

Result: `[1, 2, 3]`

Dequeue behaves the same as pop:

	return [1, 2, 3]->Dequeue()

Result: `{ Item:3 Remaining:[1, 2] }`

Insert:

	return [1, 3]->Insert(1, 2)

Result: `[1, 2, 3]`, 
1 is the zero-based position, 2 is the value

Remove at index:

	return [1, 2, 3]->Remove(1)

Result: `[1, 3]`

Removing based on value:

	for i in [1, 2, 2, 3]
	where i <> 2
	return i

Result: `[1, 3]`

Conversion to set:

	return [5, 5, 6, 6]->ToSet()

Result: `{ 5, 6 }`

List membership:

	return 5 in [1, 3, 5]

Result: `true`

Detection of empty list:

	return { exists [1] exists [] }

Result: `{ true false }`

Restriction over scalar:

	return [30, 40, 50]?(value > 30)
	
Result: `[40, 50]`

Restriction over tuple:

	return [{ Name:'Ray' }, { Name:'Nelly' }]?(Name = 'Ray')

...which is equivalent to:

	return [{ Name:'Ray' }, { Name:'Nelly' }]?(value.Name = 'Ray')

Result: `[{ Name:'Ray' }]`

Quota:

	return [30, 40, 10, 20](index < 2)

Result: `[30, 40]`, 
`index` is a reserved word which indicates the zero-based ordinal position in the list.

Set Operations
--------------

Intersection:

	return { 1, 2 } & { 2, 3 }

Result: `{ 2 }`

Union:

	return { 1, 2 } | { 2, 3 }

Result: `{ 1, 2, 3 }`

Subtraction:

	return { 1, 2, 3 } - { 3, 4 }

Result: `{ 1, 2 }`

Conversion to list:

	return { 2, 1, 3 }->ToList()

Result: `[1, 2, 3]` (in sorted order)

Ordered conversion from set to list:
	
	for i in { 2, 3, 1 }
	order (i desc)
	return i

Result: `[3, 2, 1]`

Set membership:

	return 5 in { 1, 3, 5 }

Result: `true`

Detection of empty set:

	return { exists { 1 }, exists { } }

Result: `{ true, false }`

Quota:

	return { 30, 40, 10, 20 }?(index < 2)

Result: `{ 10, 20 }`

**Note:** quota on a set forces sorting for determinism; use list quote to control ordering

Attribute Extraction
--------------------

Extraction of an attribute set from a tuple set:

	return { { ID:123 }, { ID:234 }, { ID:345 } }.ID

Result: `{ 123, 234, 345, ... }`

Extraction of an attribute list from a tuple set:

	let Items := { { ID:123 Color:Red }, { ID:234 Color:Red } }
	return Items.Color

Result: `[Red, Red]`, 
If the extracted attribute is not a key, the result is a list, not a set., A Set result would be distinct, but this may not be desired (e.g. when counting)

Extracting multiple attributes:

	return { { x:50, y:100, z:0 } { x:75, y:125, z:25 } }.{ :x, :y }

Result: `[{ x:50, y:100 }, { x:75, y:125 }]`, 
Again, because x and y don't represent a superset of a key (not necessarily proper) the result is a list

Aggregate Operations
--------------------

Count function on a set: 

	return { 1, 2, 3 }->Count()

Result: `3`, 

This is a short-hand for `{ 1, 2, 3 }->Count<Int32>()`

Count function on a list:

	return [1, 1, 2, 2]->Count()

Result: `4`

More aggregate functions:

	let i := { 1, 3, 5 }
	return { Min:i->Min(), Max:i->Max(), Avg:i->Avg() }

Result: `{ Min:1, Max:5, Avg:3 }`

Logical aggregates:

	let i := { true, true, false }
	return { All:All(i), Any:Any(i) }

Result: `{ All:false, Any:true }`, 

Logically equivalent to iterated AND and OR respectively

Grouped aggregation:
	
	for p in Customer
	return { Customer:p, NumOrders:p.Orders->Count() }

e.g. result: `{ Customer:{ ID:123, City:"Springville" }, NumOrders:12 }`

Count of distinct:

	return Customer.City->ToSet()->Count()

The result is the number of distinct cities in the Customer table

String set and list concatenation:

	return { { "Zebra", "Invasion" }->Concat() ["Zebra", "Invastion"]->Concat() }

Result: `{ "InvastionZebra", "ZebraInvasion" }`

Concatenation with delimiter:

	return { ["Zebra," "Invastion"]->Concat(" ") }

Result: `"Zebra Invasion"`

Aggregates and nulls:

	return { S:{ 1, null, 2 }->Count() L:[1, null, 2]->Count() }

Result: `{ S:2, L:3 }`

**Note:** Nulls are not ever treated as existing in sets

Time/Date Operations
--------------------

Selecting a Date from components:

	return { Year:1955, Month:3, Day:25 }=>Date

Result: `'1955/03/25'd`

Selecting a Time from components:

	return { Hour:10, Minute:15, Second:5.2 }=>Time

Result: `'10:15:5.2't`

Selecting a TimeSpan from components:

	return { Days:2, Hours:1, Minutes:23, Seconds:100.1 }->TimeSpan

Result: `'2d 1h 23m 100.1s'ts`

Adding Months:

	return '1955/3/25'd->AddMonth(2)

Result: `'1955/05/25'd`

Adding Years:

	return '1955/3/25'd->AddYear(3)

Result: `'1958/03/25'd`

Getting day-of-week:

	return '2004/04/19'd->DayOfWeek()

Result: `0` (Sunday)

Getting day-of-year:

	return '2004/11/18'd->DayOfYear()

Result: `323`

Getting days in a month:

	return 2004->DaysInMonth(2)		// or:
	return { Year:2004, Month:2 }=>DaysInMonth

Result: `29`

Getting a time-span from dates:

	return '1955/03/25'd - '1955/03/27'd

Result: `'-2d'ts`

Getting the absolute duration:

	return Abs('-2d'ts)

Result: `'2d'ts`

Converting a Date to a tuple:

	return '1955/03/25'd->ToTuple()

Result: `{ Year:1955, Month:3, Day:25 }`

Determining leap-year:

	return 2000->IsLeapYear()

Result: `true`

Getting the date part of a DateTime:

	return '2011/03/2 12:30:00'dt->DatePart()

Result: `'2011/03/2'd`

Getting the time part of a DateTime:

	return '2011/03/2 12:30:00'dt->TimePart()

Result: `'12:30:00't`

Getting today's date:

	return { : }=>Today

Getting the current date and time:

	return { : }=>Now

Getting current transaction date and time:

	return { : }=>TransactionNow

The transaction date and time don't change from the start of the transaction.

GUID Operations
---------------

Generate a new GUID:

	return { : }=>NewGUID = { : }=>NewGUID

Result: extremely high probably of `false`
, 
The empty tuple is a way of invoking a function that takes no arguments., NewGUID is not deterministic.

Bitwise Operations
------------------

Bitwise operators:

	let n := 2;
	return { Shl:n shl 1, Shr:n shr 1, Inv:~n, Or:n | 1, And:n & 3, Xor:n ^ 3 }

Result: `{ Shl:4, Shr:1, Inv:-3, Or:3, And:2, Xor:1 }`

Numeric Operations
------------------

Arithmetic operators:

	return { Add:1 + 2, Sub:4 - 1, IDiv:3 / 2, DDiv:3.0 / 2.0, Mul:10 * 3, Neg:-55, Pow:5**5, IMod:5 % 3, FMod:1.2 % 0.35 }

Result: `{ Add:3, Sub:3, IDiv:1, DDiv:1.5, Mul:30, Neg:-55, Pow:25, IMod:2, FMod:0.15 }`

Successor and predecessor for ordinal types:

	return { Succ:1++, Pred:1-- }

Result: `{ Succ:2, Pred:0 }`

Absolute value:

	return -3.2->Abs()

Result: `3.2`

Ceiling value:

	return { Neg:-3.2->Ceiling(), Pos:3.2->Ceiling() }

Result: `{ Neg:-3, Pos:4 }`

Floor value:

	return { Neg:-3.2->Floor(), Pos:3.2->Floor() }

Result: `{ Neg:-4, Pos:3 }`

Frac:

	return 12.34->Frac()

Result: `0.34`

Factorial:

	return 10->Factorial()

Result: `3628800`

Natural logarithm:

	return 6->Ln()

Result: `1.79175946922806`

Logarithm:

	return 27->Log(2)

Result: `4.75488750216347`

Base 10 logarithm:

	return 1000->Log10()

Result: `3`

Rounding:

	let n := 3141.59265
	return { n->Round(0), n->Round(2), n->Round(-2) }

Result: `{ 3142, 3141.5,9 3100 }`

Converting double's to Int32s:

	return 5.6->ToInt32()

Result: `5`

Comparisons:

	return { Equal:1 = 0, Compare1:1 ?= 0, Compare2:0 ?= 1, Compare3:1 ?= 1, NotEqual:1 <> 0 }

Result: `{ Equal:false, Compare1:1, Compare2:-1, Compare3:0, NotEqual:true }`

Random
------

Create random seed and generating from it:

	return { : }=>Seed->Random()

Result: `{ Seed:`mutated seed value` Value:`pseudo-random double between 0 and 1` }`, 
**Note:** Seed() is non-deterministic, but Random() is deterministic

Generating multiple from the same seed:

	let r1 := { : }=>Seed->Random()
	let r2 := r1.Seed->Random()
	return { r1.Value, r2.Value } 

Result: `{ `random value`, `random value` }`

Generating Int32s:

	return { : }=>Seed->Random(99)

Result: pseudo-random Int32 between 0-99

Generating in Int32 range:

	return { : }=>Seed->Random(5..10)

Result: pseudo-random Int32 between 5-10 inclusive

Generators
----------

Generate an individual ID:

	return "token"->GenerateID()

Result: next ID (Int64) for given token

**Note:** Generator values start at 1 for each unique token

ID Blocks:

	let n := "token"->GenerateID(100)
	return { n, "token"->GenerateID() }

Result: `{ `next ID`, `number at least 100 greater than prior` }`

**Note:** GenerateID is non-deterministic.

String Operations
-----------------

String concatenation:

	return "engine" + "-hitch-" + "caboose\r\n"

Result: "engine-hitch-caboose\r\n"

Alternative concatenation:

	return ["engine", "-hitch-", "caboose\r\n"]->Concat()

TODO: remaining string operations

Interval Operations
-------------------

Interval type declaration:

	var i : interval Date

Interval selector:

	let dow := { : }=>Today->DayOfWeek()
	return ({ : }=>Today - dow)..({ : }=>Today + (6 - dow))

Result: dates of enveloping week, from Sunday to Saturday

Interval functions:

	let i := 5..10
	return { i->Contains(6), i->Before(10), i->After(11), i->Meets(11..13), i->Overlaps(10..15), i->Merges(1..4 11..13), i->Begins(5..7), i->Ends(7..10) }

Result: `{ true, false, true, true, true, true, true, true }`

TODO: remaining interval operations
